/**
 * 跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。
 */

/**
 * [分析]
 * 动态规划套路二部曲：
 * 1、假设存在最优解且结果已知；
 * 2、根据题意从后往前推，找规律/通项，也即整体问题和子问题之间的关系。
 * 
 * 对于此题，
 * 1、结果有两种：成功or失败
 * 2、从后往前进行推论分析：
 *  a.假设你已经成功跳到倒数第二个位置(n-1处)，那么如何判断你是否能够到达最后一个位置呢？
 *   显然，只要nums[n-1]的值大于等于1，就能够到达最后一个位置。
 *  b.假设你现在位于倒数第三个位置(n-2)处，那么如何判断呢？
 *    显然，只要nums[n-2]的值大于等于2，就能够到达最后一个位置
 *  ......
 * 
 * 解题过程就是如此简单粗暴
 * 
 * 但照着这个做，肯定不会过。有一些细节被我们忽略了。
 * 
 * 考虑这个情形：你当前位于位置m处，由于解题过程是从后往前推，那么从m+1位置能够成功跳到最后一个位置，
 *    所以，要使得从m这个位置成功跳到最后一个位置，只需要在位置m处能够成功跳到m+1，即只需nums[m]大于等于1
 * 
 * @param {number[]} nums
 * @return {boolean}
 */

var canJump = function(nums) {
  if (!nums) return false

  var step = 0
  for (var i = nums.length - 1; i >= 0; --i) {
    if (nums[i] >= step) {
      step = 1
    } else {
      ++step
    }
  }
  return step === 1
}