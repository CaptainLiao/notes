/**
从排序数组中删除重复项
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:
给定数组 nums = [1,1,2], 
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 
你不需要考虑数组中超出新长度后面的元素。

示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。

算法过程：
遍历给定的排序数组 nums，变量 i 记录当前被遍历元素的下标(初始化为1)，j记录数组nums无重复元素的长度（初始化为0），
比较元素 nums[i] 和 nums[j] 的值，如果二者不相等，那么 j 的长度加1，nums[j]赋值为nums[i]。
重复上面的操作，直到遍历结束。
因为 j 从 0 开始计算，所以最后返回的长度为 j+1。
*/

class Solution{
public:
  int removeDuplicates(vector<int> &nums) {
    int i = 1;
    int j = 0;
    for(; i < nums.size(); ++i) {
      if(nums[i] != nums[j]) {
        num[++j] = nums[i];
      }
    }
    return ++j;
  }
}

